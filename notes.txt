books:
    Javascript: The Good Parts

online editors:
    plnkr.co (Plunker)

building blocks:
    numbers:       5, 6.4
    strings:       "text"
    escaping:      \
    variables:     var myVar = 5;
    concatenation: +
    operators:     binary:  +, =, ==, +=, -=, %, &&, ||, 
                   unary:   ++, --, !
                   ternary: (boolean) ? true : false
    white space:   you can remove it in most situations (unless they're separating keywords and var names)
    end line term: ';' (but not always required)
    expressions:   evaluate to a value
    statements:    any set of expressions that has an impact on the program (assigning, calling)
    functions:
    objects: 
    control flow:  if, else if, else, while, do while, break, switch

inline javascript:

  <!DOCTYPE html>
      <head> </head>
      <body>
          <h1>Hello!</h1>
          <script>
              alert(3+5)
              alert("Hello Javascript")
          </script>
      </body>
  </html>
  
refer to external file:

  <!DOCTYPE html>
      <head> </head>
      <body>
          <h1>Hello!</h1>
          <script src="script.js"></script>
      </body>
  </html>

program flow:

    // ifStatement.js
    var ageAsString = prompt("What is your age? ", "");
    var age = Number(ageAsString);
    if (age < 40) {  // good practice to use the braces
        alert("Oh you're so young...");
    } else if (age == 40) {
    } else {
        alert("Don't worry, you're young at heart");
    }
    alert("Thank you");

    // while.js
    var ageAsString = prompt("What is your age? ", "");
    var string = "";
    while (age > 0) {
        string += Happy Birthday \n";
        age -= 1;
    }
    alert(string);

    // doWhile.js (will run the loop at least once)
    var ageAsString = prompt("What is your age? ", "");
    var string = "";
    do {
        string += Happy Birthday \n";
        age -= 1;
    } while (age > 0)
    alert(string);

    // for.js
    var ageAsString = prompt("What is your age? ", "");
    var string = "";
    for (var theAge = age; theAge > 0; theAge -= 1) {
        string += Happy Birthday \n";
    }
    alert(string);

    // break.js
    var ageAsString = prompt("What is your age? ", "");
    var string = "";
    for (var theAge = age; theAge > 0; theAge -= 1) {
        string += Happy Birthday \n";
        // print a max of 7
        if (counter % 7 == 0)
            break;
    }
    alert(string);

    // switch.js
    var animal = "dog"
    switch(animal) {
        case "cat":
            alert("meow");
            break;
        case "dog":
            alert("woof");
            break;
        default:
            alert("Unknown animal!");
            break;
    }

Truth:

    values:     true and false
    operators:  && || !
    falsy:      null, undefined, NaN, "", 0
    truthy:     everything else
    equality:   simple equality ==   (0==false  is true)
                exact equality  ===  (0===false is false)


    var isMale = true;
    var isOld = true;
    // will stop evaluating if isMale is false (useful)
    var isOldMan = isMale && isOld; 

Functions:
    naming
    anonymous
    params
        too many? ignored
        too few?  undefined

    // named function (sum is 13)
    function add(x, y) {
        var z = x + y;
        return z;
    }
    var sum = add(5,7);

    // anonymous function (sum is 13)
    var add = function (x, y) {
        var z = x + y;
        return z;
    }
    var sum = add(5,7);

    // too few parameters (sum is NaN - not a number)
    function add(x, y) {
        var z = x + y;
        return z;
    }
    var sum = add(5);

    // too many parameters (sum is 13) and the last one is ignored
    function add(x, y) {
        var z = x + y;
        return z;
    }
    var sum = add(5,7,9);
    output.innerHTML = sum; // updates a div on the web page

    // no return value: undefined (a function that doesn't return a value returns 'undefined')
    function add(x, y) {
        var z = x + y;
        return;
    }
    var sum = add(5,7,9);

    // hoisting - calling the function before it is defined (declaration order doesn't matter)
    var sum = add(5,7);
    var function add(x, y) {
        var z = x + y;
        return z;
    }

    // scope
    var constant = 32; // global scope
    function celciusToFarenheit( temperature ) {
        var multiplier = 9;
        var divisor = 5;
        var farenheitTemp = temperature * multiplier / divisor + constant; // constant can be used here
        return farenheitTemp;
    }
    output.innerHTML = celciusToFarenheit
    var z = multipler; // multiplier is not visible here

    var x = 15;
    if (x < 20) {
        var y = x;
    }
    var z = y;
    output.innerHTML = z;  // this actually works because wasn't declared inside a function

    // nested functions
    function hypotenuse() {
        var side1 = 3;
        var side2 = 4;

        function squareSide1() {
            return side1 * side1; // has access to vars in the outer function
        }

        function squareSide2() {
            return side2 * side2;
        }

        return Math.sqrt(squareSide1() + squareSide2());
    }
    output.innerHTML=hypotenuse();

    // braces to not create scope... only functions

    // global vs. local

    // closure - 
    // a function scopes its variables at the time it is declared and not at the time it's run
    var scope = "global";
    function testScope() {
        var scope = "local";
        function innerFunc() { return scope; }
        return innerFunc;
    }
    var innerFunc = testScope();
    var answer = innerFunc()
    // or this... var answer = testScope()();
    output.innerHTML = answer;

    // here, x will stay in scope any time this function is run because someFunction() creates a closure over it ever if the actual variable in global scope goes out of scope
    var x = 50
    function someFunction() {
        var y = 100;
        return x = y;
    }
    var answer = someFunction()
    output.innerHTML = answer;

    // recursion - when a function calls itself
    function func1(num, exp) {
        if (exp === 0) {
            return 1;
        }
        return num * func1(num, exp-1);
    }
    var answer = nonRecursiveFunc(2,10);
    output.innerHTML = answer;
    // anything you can write recursively you can write iteratively
    function nonRecursivefunc(num, exp) {
        var retVal = 1;
        for (var i = 0; i < exp; i++) {
            retVal *= num;
        }
        return retVal;
    }
    var answer = nonRecursiveFunc(2,10);
    output.innerHTML = answer;

